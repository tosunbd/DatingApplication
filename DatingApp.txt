Udemy - Build an app with ASPNET Core and Angular from scratch 2021-11

01 - Introduction

02 - Building a walking skeleton Part One - API
---------------------------------------------------------------------

dotnet new sln (insite DatingApp and it will create a sln file with the name of the folder)
dotnet new webapi -o API (insite DatingApp and it will create API project with .csproj file)
dotnet sln add API (Project `API\API.csproj` added to the solution.)

extentions added (c#, Material Theme Icon etc)

dotnet dev-certs https --trust 

Create a folder Entities
create a class AppUser

Adding packages to the project
---------------------------------------------------------------------
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection

for PostgreSQL
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design

---------------------------------------------------------------------


vs code = change private to = _
this => c# extentions conf = right click off


"ConnectionStrings": {            
    "SqlDbConnection": "Server=.;Database=DatingApp;Trusted_Connection=True;"
}

Migrations
---------------------------------------------------------------------
dotnet ef migrations add InitialCreate -o Data/Migrations
---------------------------------------------------------------------
dotnet ef database update


Adding git to the code (DatingApp location)
---------------------------------------------------------------------
git status

git init 
git origin -M main
git push -u origin main

Comment Message = End of Section 2

03 - Building a walking skeleton Part Two - Angular

ng new client --strict=false

Angular Language Service => Angular:Enable-strict-mode-prompt = right click off

for Angular - extentions installation
Angular Language Service

create AccountController and BaseApiController and 
[ApiController]
[Route("api/[controller]")]
and 
ControllerBase
implements

in account controller implements 
[HttpPost("register")]
public async Task<ActionResult<AppUser>> Register(RegisterDto registerDto) {}

[HttpPost("login")]
public async Task<ActionResult<AppUser>> Login(LoginDto loginDto)

create folder DTOs under Entities. create 2 Dtos LoginDto and RegisterDto

for clean database

dotnet ef database drop
dotnet ef database update



ng add ngx-bootstrap
npm install ngx-bootstrap --save

npm install ngx-bootstrap --save --force
npm install ngx-bootstrap@latest --legacy-peer-deps

add 'BrowserAnimationModule' to app.module.ts

npm install font-awesome


04 - Authentication basics


Update Entities/AppUser = add PasswordHash and PasswordSalt

new migrations add = dotnet ef migrations add PasswordHashSaltAdded
dotnet ef database update

Create folder Interfaces and Services
inside Interfaces create ITokenService.cs file and inside this create
	string CreateToken(AppUser user);
	
inside Services create TokenService.cs file and implement CreateToken 

create UserDto

inside AccountController inject ITokenService and initialize from parameter

add package
Microsoft.AspNetCore.Authentication.JwtBearer by Microsoft

dotnet add Microsoft.AspNetCore.Authentication.JwtBearer (in commandLine)

create folder Extensions and create two cs file
ApplicationServiceExtensions.cs (Static class because no need to create instance)
IdentityServiceExtensions.cs (Static class because no need to create instance)

stage all section by clicking +
write commets = "End of Section 4" and commit
push to git 

-------------------- End of Section 4----------------------------------------------

05 - Client login and register

ng g --help
cd src/app
ng g c nav --skip-tests=true



06 - Routing in Angular


07 - Error handling


08 - Extending the API

update AppUser and create Photo.cs by right clicking and use properties
dotnet ef migrations Add ExtendedUserEntity
dotnet ef migrations remove

fully define entity relationship and then
dotnet ef migrations Add ExtendedUserEntity
dotnet ef database update
dotnet ef database drop

Convert Services folder = Repository
Convert Interfaces folder = IRepository


Repository Pattern = MARTIN FOWLER (PATTERS OF ENTERPRISE ARCHITECHTURE)

Implementation of IUserRepository and UserRepository(implementation of IUserRepository)
in ApplicationServiceExtensions.cs add (not in Program.cs)
(Builder.Services.AddScoped<IUserRepository, UserRepository>();)
services.AddScoped<IUserRepository, UserRepository>();

remove DataContext from UserController and implement IUserRepository userRepository

"premature optimization is the root of all evil"





09 - Building the User Interface


10 - Updating resources


10 - Updating resources


12 - Reactive forms


13 - Paging, Sorting and Filtering


14 - Adding the Like User feature



15 - Adding the messaging feature


16 - Identity and role management


17 - SignalR


18 - Unit of work pattern and finishing touches


19 - Publishing



20 - Updating to .Net 6, Angular 12 and Bootstrap 5